1. npm init -y
2. npm i express mongoose ejs
3. 
mkdir views
touch home.ejs

(ctrl+s)

4. 
cd ..
touch app.js

const express = require('express');
const app = express();
const path = require('path');

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'))

app.get('/',(req,res) => {
    res.render('home')
})

app.listen(3000, ()=>{
    console.log('Serving on port 3000')
})

(ctrl+s)

5.
mkdir models
touch campground.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const CampgroundSchema = new Schema({
    title: String,
    Price: String,
    description: String,
    location: String
});

module.export = mongoose.model('Campground',CampgroundSchema)


6.
npm i method-override
const methodOverride = require('method-override');
app.use(methodOverride('_method'))

7.
npm i morgan

const morgan = require('morgan');

8.
npm i ejs-mate

const ejsMate = require('ejs-mate');

app.engine('ejs', ejsMate)


9.(course433 / 440)
touch index.js (in the same folder)

class AppError extends Error {
    constructor(message, status){
        super();
        this.message = message;
        this.status = status;

    }
}

module.exports = AppError;

(back in main js)
const AppError = require('./AppError')

function wrapAsync(fn){
    return function(req, res, next){
        fn(req, res, next).catch(e => next(e))
    }
}



app.use((err, req, res, next)=>{
    const { status = 500, message = 'something went wrong' } = err;
    // here i give default value to the destruction
    res.status(status).send(message)
})


10.Course441
(create a folder called utils)
(within it, create a file called ExpressError.js)

class ExpressError extends Error{
    constructor(message, statusCode){
        super();
        this.message = message;
        this.statusCode = statusCode;
    }

}

module.exports = ExpressError;



(within the same folder, create catchAsync.js)

module.exports = func => {
    return (req, res, next) => {
        func(req, res, next).catch(next);
    }
}


(in app.js)
const catchAsync = require('./utils/catchAsync');
const ExpressError = require('./utils/ExpressError');

app.all('*', (req, res, next) => {
   next(new ExpressError('Page not found', 404))
})

app.use((err, req, res, next) => {
    const {statusCode = 500, message = 'something went wrong'} = err;
    res.status(statusCode).res.status(statusCode).render('error')
})

(within the view folder, create error.ejs)
<% layout('layouts/boilerplate')%>
<div class="row">
    <div class="col-6 offset-3">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading"><%= err.message %> </h4>
            <p><%= err.stack %></p>
          </div>
    </div>
</div>


11.Course444
npm i joi
const Joi = require('joi')

create schemas.js
const Joi = require('joi');
module.exports.campgroundSchema = Joi.object({
         campground: Joi.object({
                title: Joi.string().required(),
                price: Joi.number().required().min(0),
                image: Joi.string().required(),
                location: Joi.string().required(),
                description: Joi.string().required(),
            }).required()
        });



12.
use console.log() and res.send to test the code

13.npm i cookie-parser

14.npm i express-session

15.npm i connect-flash

16.npm i bcrypt

17.npm i passport passport-local passport-local-mongoose
(Section51)

18.npm i multer
(Section54)
const multer  = require('multer')
const upload = multer({ dest: 'uploads/' })

19.npm i dotenv
(Section54)

20.npm i cloudinary multer-storage-cloudinary
(Section54)

21.npm i bs-custom-file-input
Course535

22.npm i @mapbox/mapbox-sdk
Course541 Optional